import logging
from aiogram import (Bot, Dispatcher, executor, types)
from config import BOT_TOKEN
from voice import get_voices, text_to_speech

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ–ª–æ—Å–æ–≤
voices = get_voices()


@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for voice_name in voices.keys():
        keyboard.add(voice_name)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text in voices.keys())
async def voice_selected(message: types.Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ–ª–æ—Å
    """
    selected_voice = message.text
    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –≤ user_data
    await message.answer(f"–ì–æ–ª–æ—Å *{selected_voice}* –≤—ã–±—Ä–∞–Ω ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏.", parse_mode="Markdown")
    dp.current_state(user=message.from_user.id).voice = voices[selected_voice]


@dp.message_handler(content_types=["text"])
async def text_to_voice(message: types.Message):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    """
    user_state = dp.current_state(user=message.from_user.id)
    voice_id = getattr(user_state, "voice", None)

    if not voice_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ üëá")
        return

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–∑–≤—É—á–∫—É...")

    try:
        audio_data = text_to_speech(message.text, voice_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞—É–¥–∏–æ –∫–∞–∫ voice
        await bot.send_voice(
            chat_id=message.chat.id,
            voice=audio_data,
            caption="–ì–æ—Ç–æ–≤–æ ‚úÖ"
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)